WARNING: An illegal reflective access operation has occurred
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
# JMH version: 1.27
# VM version: JDK 11.0.2, OpenJDK 64-Bit Server VM, 11.0.2+9
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: <none>
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.TruncMessageJsonProviderBenchmark.writeWithDefaultProvider
# Parameters: (messageLen = 500)

# Run progress: 0.00% complete, ETA 00:10:40
# Warmup Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁹ s/op
Iteration   1: ≈ 10⁻⁹ s/op
Iteration   2: ≈ 10⁻⁹ s/op
Iteration   3: ≈ 10⁻⁹ s/op

# Run progress: 6.25% complete, ETA 00:10:04
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁹ s/op
Iteration   1: ≈ 10⁻⁹ s/op
Iteration   2: ≈ 10⁻⁹ s/op
Iteration   3: ≈ 10⁻⁹ s/op


Result "org.sample.TruncMessageJsonProviderBenchmark.writeWithDefaultProvider":
  ≈ 10⁻⁹ s/op


# JMH version: 1.27
# VM version: JDK 11.0.2, OpenJDK 64-Bit Server VM, 11.0.2+9
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: <none>
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.TruncMessageJsonProviderBenchmark.writeWithDefaultProvider
# Parameters: (messageLen = 2097151)

# Run progress: 12.50% complete, ETA 00:09:24
# Warmup Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁹ s/op
Iteration   1: ≈ 10⁻⁹ s/op
Iteration   2: ≈ 10⁻⁹ s/op
Iteration   3: ≈ 10⁻⁹ s/op

# Run progress: 18.75% complete, ETA 00:08:43
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁹ s/op
Iteration   1: ≈ 10⁻⁹ s/op
Iteration   2: ≈ 10⁻⁹ s/op
Iteration   3: ≈ 10⁻⁹ s/op


Result "org.sample.TruncMessageJsonProviderBenchmark.writeWithDefaultProvider":
  ≈ 10⁻⁹ s/op


# JMH version: 1.27
# VM version: JDK 11.0.2, OpenJDK 64-Bit Server VM, 11.0.2+9
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: <none>
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.TruncMessageJsonProviderBenchmark.writeWithDefaultProvider
# Parameters: (messageLen = 2097153)

# Run progress: 25.00% complete, ETA 00:08:03
# Warmup Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁹ s/op
Iteration   1: ≈ 10⁻⁹ s/op
Iteration   2: ≈ 10⁻⁹ s/op
Iteration   3: ≈ 10⁻⁹ s/op

# Run progress: 31.25% complete, ETA 00:07:23
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁹ s/op
Iteration   1: ≈ 10⁻⁹ s/op
Iteration   2: ≈ 10⁻⁹ s/op
Iteration   3: ≈ 10⁻⁹ s/op


Result "org.sample.TruncMessageJsonProviderBenchmark.writeWithDefaultProvider":
  ≈ 10⁻⁹ s/op


# JMH version: 1.27
# VM version: JDK 11.0.2, OpenJDK 64-Bit Server VM, 11.0.2+9
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: <none>
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.TruncMessageJsonProviderBenchmark.writeWithDefaultProvider
# Parameters: (messageLen = 4194304)

# Run progress: 37.50% complete, ETA 00:06:43
# Warmup Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁹ s/op
Iteration   1: ≈ 10⁻⁹ s/op
Iteration   2: ≈ 10⁻⁹ s/op
Iteration   3: ≈ 10⁻⁹ s/op

# Run progress: 43.75% complete, ETA 00:06:02
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁹ s/op
Iteration   1: ≈ 10⁻⁹ s/op
Iteration   2: ≈ 10⁻⁹ s/op
Iteration   3: ≈ 10⁻⁹ s/op


Result "org.sample.TruncMessageJsonProviderBenchmark.writeWithDefaultProvider":
  ≈ 10⁻⁹ s/op


# JMH version: 1.27
# VM version: JDK 11.0.2, OpenJDK 64-Bit Server VM, 11.0.2+9
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: <none>
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.TruncMessageJsonProviderBenchmark.writeWithTruncProvider
# Parameters: (messageLen = 500)

# Run progress: 50.00% complete, ETA 00:05:22
# Warmup Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁸ s/op
Iteration   1: ≈ 10⁻⁸ s/op
Iteration   2: ≈ 10⁻⁹ s/op
Iteration   3: ≈ 10⁻⁹ s/op

# Run progress: 56.25% complete, ETA 00:04:42
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁸ s/op
Iteration   1: ≈ 10⁻⁸ s/op
Iteration   2: ≈ 10⁻⁹ s/op
Iteration   3: ≈ 10⁻⁹ s/op


Result "org.sample.TruncMessageJsonProviderBenchmark.writeWithTruncProvider":
  ≈ 10⁻⁹ s/op


# JMH version: 1.27
# VM version: JDK 11.0.2, OpenJDK 64-Bit Server VM, 11.0.2+9
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: <none>
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.TruncMessageJsonProviderBenchmark.writeWithTruncProvider
# Parameters: (messageLen = 2097151)

# Run progress: 62.50% complete, ETA 00:04:01
# Warmup Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁹ s/op
Iteration   1: ≈ 10⁻⁸ s/op
Iteration   2: ≈ 10⁻⁹ s/op
Iteration   3: ≈ 10⁻⁹ s/op

# Run progress: 68.75% complete, ETA 00:03:21
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁹ s/op
Iteration   1: ≈ 10⁻⁸ s/op
Iteration   2: ≈ 10⁻⁹ s/op
Iteration   3: ≈ 10⁻⁹ s/op


Result "org.sample.TruncMessageJsonProviderBenchmark.writeWithTruncProvider":
  ≈ 10⁻⁹ s/op


# JMH version: 1.27
# VM version: JDK 11.0.2, OpenJDK 64-Bit Server VM, 11.0.2+9
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: <none>
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.TruncMessageJsonProviderBenchmark.writeWithTruncProvider
# Parameters: (messageLen = 2097153)

# Run progress: 75.00% complete, ETA 00:02:41
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 0.002 s/op
Iteration   1: 0.002 s/op
Iteration   2: 0.002 s/op
Iteration   3: 0.001 s/op

# Run progress: 81.25% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 s/op
Iteration   1: 0.001 s/op
Iteration   2: 0.001 s/op
Iteration   3: 0.001 s/op


Result "org.sample.TruncMessageJsonProviderBenchmark.writeWithTruncProvider":
  0.001 ±(99.9%) 0.001 s/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.2, OpenJDK 64-Bit Server VM, 11.0.2+9
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: <none>
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.TruncMessageJsonProviderBenchmark.writeWithTruncProvider
# Parameters: (messageLen = 4194304)

# Run progress: 87.50% complete, ETA 00:01:20
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 0.002 s/op
Iteration   1: 0.001 s/op
Iteration   2: 0.001 s/op
Iteration   3: 0.001 s/op

# Run progress: 93.75% complete, ETA 00:00:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 s/op
Iteration   1: 0.001 s/op
Iteration   2: 0.001 s/op
Iteration   3: 0.001 s/op


Result "org.sample.TruncMessageJsonProviderBenchmark.writeWithTruncProvider":
  0.001 ±(99.9%) 0.001 s/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# Run complete. Total time: 00:10:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (messageLen)  Mode  Cnt   Score    Error  Units
TruncMessageJsonProviderBenchmark.writeWithDefaultProvider           500  avgt    3  ≈ 10⁻⁹            s/op
TruncMessageJsonProviderBenchmark.writeWithDefaultProvider       2097151  avgt    3  ≈ 10⁻⁹            s/op
TruncMessageJsonProviderBenchmark.writeWithDefaultProvider       2097153  avgt    3  ≈ 10⁻⁹            s/op
TruncMessageJsonProviderBenchmark.writeWithDefaultProvider       4194304  avgt    3  ≈ 10⁻⁹            s/op
TruncMessageJsonProviderBenchmark.writeWithTruncProvider             500  avgt    3  ≈ 10⁻⁹            s/op
TruncMessageJsonProviderBenchmark.writeWithTruncProvider         2097151  avgt    3  ≈ 10⁻⁹            s/op
TruncMessageJsonProviderBenchmark.writeWithTruncProvider         2097153  avgt    3   0.001 ±  0.001   s/op
TruncMessageJsonProviderBenchmark.writeWithTruncProvider         4194304  avgt    3   0.001 ±  0.001   s/op
